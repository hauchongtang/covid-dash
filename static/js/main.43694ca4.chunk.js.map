{"version":3,"sources":["Components/TopBar/TopBar.jsx","api-handler/index.js","Components/Tables/Tables.jsx","Components/Cards/SGCards.jsx","Components/sgData/Singapore.jsx","Components/News/News.jsx","Components/About/About.jsx","Components/Cards/Cards.jsx","Components/Charts/Charts.jsx","App.js","Components/Tables/TopTenTables.jsx","Components/Tables/TablesYtd.jsx","Components/Tables/TopTenYtd.jsx","Route.js","index.js"],"names":["useStyles","makeStyles","root","backgroundColor","padding","margin","root1","textAlign","marginTop","TopBar","styles","AppBar","position","color","elevation","className","Toolbar","Grid","justify","container","spacing","item","Button","href","button","Typography","variant","role","aria-label","id","size","current","Paper","fetchData","a","axios","get","response","data","console","log","fetchDailyData","country","variableUrl","url","fetchWorldDailyData","reverse","fetchCurrentData","infected","confirmed","value","recovered","deaths","modifiedData","active","fetchTopNews","dataSet","items","fetchSGData","hospitalizedData","community","inCommunityFacilites","stable","stableHospitalized","critical","criticalHospitalized","fetchWorldTdyYtd","urlTodayUnsorted","urlYtd","urlYtdUnsorted","todayResponse","ytdResponse","todayRes","ytdRes","today","slice","todayAll","yesterday","yesterdayAll","width","maxHeight","card","Tables","useState","tdyData","setTdyData","useEffect","fetchedAPI","fetchAPI","columns","label","map","align","more","component","Card","CardContent","TableContainer","Table","stickyHeader","TableHead","head","TableRow","column","TableCell","key","TableBody","row","hover","tabIndex","CountryCode","LinearProgress","marginBottom","borderRadius","borderBottom","SGCards","setData","sgData","getAPI","totalInfected","totalRecovered","totalDeaths","totalActive","xs","md","cx","gutterBottom","start","end","duration","separator","display","justifyContent","marginLeft","card1","card2","card3","Singapore","dailyData","setDailyData","currentData","setCurrentData","hospitalData","setHospitalData","sgLineGraph","length","labels","Date","toDateString","datasets","Confirmed","borderColor","fill","Deaths","Recovered","Active","options","maintainAspectRatio","responsive","scales","xAxes","type","ticks","autoSkip","maxTicksLimit","yAxes","sgBarGraph","legend","hospitalBarGraph","activeBreakdown","info","direction","alignItems","borderTop","News","newsData","mapNews","index","gutterBotton","countries","countryCode","name","title","content","Link","publishedAt","toLocaleString","About","tables","Cards","date","parseInt","TotalConfirmed","TotalRecovered","TotalDeaths","ytdData","setYtdData","topDailyBar","todayCases","todayDeaths","stacked","topYtdBar","style","justifyItems","Charts","worldDailyData","setWorldData","total","worldBreakdown","worldLineGraph","last_update","total_cases","total_deaths","total_recovered","lg","toFixed","App","state","dataDynamic","fetchedData","this","setState","Global","React","Component","TopTenTables","TablesYtd","TopTenYtd","Routes","exact","path","ReactDOM","render","basename","Route","document","getElementById"],"mappings":"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","file":"static/js/main.43694ca4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Button, Grid, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)',\r\n    padding: '0% !important',\r\n    margin: '0% !important'\r\n  },\r\n  root1: {\r\n    padding: '1%',\r\n    textAlign: 'justify',\r\n    marginTop: '0% !important',\r\n    // marginBottom: '1% !important',\r\n    // borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  }\r\n})\r\n\r\nconst TopBar = () => {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position='static' color='transparent' elevation={0} className={styles.root}>\r\n        <Toolbar>\r\n          <Grid\r\n            justify='space-evenly'\r\n            container\r\n            spacing={3}>\r\n            <Grid item>\r\n              <Button href='#/' className={styles.button} color=\"inherit\">\r\n                <Typography variant='h6'>\r\n                  <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">𝗖𝗢𝗩𝗜𝗗🦠𝗧𝗥𝗔𝗖𝗞𝗘𝗥</span>\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/' color='inherit' className={styles.current}>\r\n                Home\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/singapore' color='inherit' className={styles.current}>\r\n                Singapore\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/summary' color='inherit' className={styles.current}>\r\n                Summary\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/news' color='inherit' className={styles.current}>\r\n                News\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/about' color='inherit' className={styles.current}>\r\n                About\r\n              </Button>\r\n            </Grid>\r\n          </Grid >\r\n        </Toolbar >\r\n      </AppBar >\r\n      <Paper elevation={0} className={styles.root1}>\r\n        <Typography variant='button'>\r\n          For the latest travel advisories visit\r\n          <Button color='secondary' href='https://www.who.int/emergencies/diseases/novel-coronavirus-2019/travel-advice'>World Health Organisation</Button>\r\n        </Typography>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TopBar;","import axios from 'axios';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  const url = 'https://api.covid19api.com/total/country';\r\n  var variableUrl = url;\r\n  if (country) {\r\n    variableUrl = `${url}/${country}`;\r\n  }\r\n  if (!country) {\r\n    variableUrl = `${url}/singapore`;\r\n  }\r\n  try {\r\n    const response = await axios.get(variableUrl);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchWorldDailyData = async () => {\r\n  try {\r\n    const url = 'https://covid19-api.org/api/timeline';\r\n    const response = await axios.get(url);\r\n    return response.data.reverse();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries';\r\n    const response = await axios.get(url);\r\n    return response.data.countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchCurrentData = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries/Singapore';\r\n    const response = await axios.get(url);\r\n    const infected = response.data.confirmed.value;\r\n    const recovered = response.data.recovered.value;\r\n    const deaths = response.data.deaths.value;\r\n    const active = infected - deaths - recovered;\r\n    const modifiedData = { infected, recovered, active, deaths };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSummaryData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data;\r\n    const countriesData = dataSet.Countries;\r\n    return countriesData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopNews = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/news/trending';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data.items;\r\n    return dataSet;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopDaily = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/v3/analytics/dailyNewStats?limit=10';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSGData = async () => {\r\n  try {\r\n    const url = 'https://api.apify.com/v2/key-value-stores/yaPbKe9e5Et61bl7W/records/LATEST?disableRedirect=true';\r\n    const response = await axios.get(url);\r\n    const hospitalizedData = {\r\n      community: response.data.inCommunityFacilites,\r\n      stable: response.data.stableHospitalized,\r\n      critical: response.data.criticalHospitalized\r\n    }\r\n    return hospitalizedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchWorldTdyYtd = async () => {\r\n  try {\r\n    const urlToday = 'https://disease.sh/v3/covid-19/countries?sort=todayCases';\r\n    const urlTodayUnsorted = 'https://disease.sh/v3/covid-19/countries';\r\n    const urlYtd = 'https://disease.sh/v3/covid-19/countries?yesterday=true&sort=todayCases';\r\n    const urlYtdUnsorted = 'https://disease.sh/v3/covid-19/countries?yesterday=true';\r\n    const todayResponse = await axios.get(urlToday);\r\n    const ytdResponse = await axios.get(urlYtd);\r\n    const todayRes = await axios.get(urlTodayUnsorted);\r\n    const ytdRes = await axios.get(urlYtdUnsorted);\r\n    const modifiedData = {\r\n      today: todayResponse.data.slice(0, 10),\r\n      todayAll: todayRes.data,\r\n      yesterday: ytdResponse.data.slice(0, 10),\r\n      yesterdayAll: ytdRes.data\r\n    }\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst Tables = () => {\r\n  const styles = useStyles();\r\n  const [tdyData, setTdyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { todayAll } = fetchedAPI;\r\n      setTdyData(todayAll);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"cases\", label: \"Total Cases\" },\r\n    { id: \"todayCases\", label: \"New Cases\" },\r\n    { id: \"deaths\", label: \"Total Deaths\" },\r\n    { id: \"recovered\", label: \"Total Recovered\" },\r\n    { id: \"todayRecovered\", label: \"New Recovered\" },\r\n    { id: \"active\", label: \"Active\" },\r\n    { id: \"casesPerOneMillion\", label: \"Cases per million\" },\r\n    { id: \"deathsPerOneMillion\", label: \"Deaths per million\" },\r\n    { id: \"population\", label: \"Total Population\" },\r\n    { id: \"continent\", label: \"Continent\" }\r\n  ];\r\n\r\n  if (!tdyData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/summary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/ytdsummary'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <TableContainer className={styles.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead className={styles.head}>\r\n                    <TableRow>\r\n                      {columns.map((column) => (\r\n                        <TableCell key={column.id}>{column.label}</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {tdyData.map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row.CountryCode}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id}>{value}</TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <caption>Courtesy of https://disease.sh/</caption>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { fetchCurrentData } from '../../api-handler';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    margin: 0,\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    marginBottom: '0% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    padding: '2% !important',\r\n    margin: '10% !important',\r\n    marginTop: '4% !important',\r\n    marginBottom: '2% !important',\r\n    textAlign: 'justify',\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n});\r\n\r\nconst SGCards = () => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const getAPI = async () => {\r\n      const sgData = await fetchCurrentData();\r\n      setData(sgData);\r\n    }\r\n    getAPI()\r\n  }, []);\r\n  const totalInfected = data.infected;\r\n  const totalRecovered = data.recovered;\r\n  const totalDeaths = data.deaths;\r\n  const totalActive = data.active;\r\n\r\n  const styles = useStyles();\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify='center'>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SGCards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, HorizontalBar, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, Paper } from '@material-ui/core';\r\nimport { fetchDailyData, fetchCurrentData, fetchSGData } from '../../api-handler/index';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport SGCards from '../Cards/SGCards';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    marginTop: '0% !important',\r\n  },\r\n  root: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '2% !important'\r\n  },\r\n  root1: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '1% !important'\r\n  },\r\n  card: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card1: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card2: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card3: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  }\r\n})\r\n\r\nconst Singapore = () => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  const [currentData, setCurrentData] = useState({});\r\n  const [hospitalData, setHospitalData] = useState({});\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n      setCurrentData(await fetchCurrentData());\r\n      setHospitalData(await fetchSGData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const sgLineGraph = (\r\n    dailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: dailyData.map(items => new Date(items.Date).toDateString()),\r\n          datasets: [{\r\n            data: dailyData.map(items => items.Confirmed),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Recovered),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Active),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 4\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : null\r\n  )\r\n\r\n  const sgBarGraph = (\r\n    currentData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Confirmed', 'Recovered', 'Active', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)', 'rgba(255, 0, 0, 0.3)'],\r\n              data: [currentData.infected, currentData.recovered, currentData.active, currentData.deaths],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const hospitalBarGraph = (\r\n    hospitalData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)'],\r\n              data: [hospitalData.community, hospitalData.stable, hospitalData.critical]\r\n            }\r\n          ]\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />) : null\r\n  )\r\n\r\n  const activeBreakdown = (\r\n    hospitalData ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [{\r\n            data: [hospitalData.community, hospitalData.stable, hospitalData.critical],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <div className={styles.info}>\r\n        <SGCards />\r\n      </div>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {sgLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Summary</Typography>\r\n            {sgBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={0} className={styles.root1}>\r\n        <Grid xs={12} container alignItems='center'>\r\n          <Grid item component={Card} className={styles.card2}>\r\n            <Typography variant='button' align='center'>Breakdown of Active Cases</Typography>\r\n            {activeBreakdown}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card3}>\r\n            <Typography variant='button' align='center'>{currentData.active} Active Cases in Hospital</Typography>\r\n            {hospitalBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Singapore;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, CardContent, Typography, Link, LinearProgress } from '@material-ui/core';\r\nimport { countries } from 'country-data';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport { fetchTopNews } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'justify',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst News = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const newsData = await fetchTopNews();\r\n      setData(newsData);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  if (!data) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  const mapNews = data.map((items, index) => {\r\n    return (\r\n      <div>\r\n        <CardContent className={styles.card}>\r\n          <Typography variant='h6' color='textPrimary' gutterBotton>{countries[items.countryCode].name}</Typography>\r\n          <Typography variant='h6' color='primary' gutterBottom>{items.title}</Typography>\r\n          <Typography variant='body2'>{items.content}</Typography>\r\n          <Typography variant='caption'>\r\n            Source:&nbsp;\r\n            <Link href={items.url}>{items.url}</Link>\r\n          </Typography>\r\n          <Typography variant='body2'>Published:&nbsp;{new Date(items.publishedAt).toLocaleString()}</Typography>\r\n        </CardContent>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Grid container spacing={0} align='center'>\r\n        <Grid item component={Card}>\r\n          {mapNews}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport { CardContent, Typography, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst About = () => {\r\n  const styles = useStyles();\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Mentions</Typography>\r\n        <Button href='https://api.covid19api.com'>covid19api</Button>\r\n        <Button href='https://covid19-api.org'>covid19-api</Button>\r\n        <Button href='https://covid19.mathdro.id'>covid19.mathdro.id</Button>\r\n        <Button href='https://api.coronatracker.com'>CoronaTrackerAPI</Button>\r\n        <Button href='https://api.apify.com'>Apify API</Button>\r\n        <Button href='https://disease.sh/'>\r\n          disease.sh\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Content</Typography>\r\n        <Typography variant='button'>Made with React, material-ui and chartjs</Typography>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Code and Contributors</Typography>\r\n        <Button size='large' href=' https://github.com/thchong-code/covid-dash' color='inherit'>\r\n          Github\r\n        </Button>\r\n        <Button size='large' href='https://github.com/imsamuel' color='inherit'>\r\n          imsamuel\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Find me !</Typography>\r\n        <Button size='large' href=' https://thchong-code.github.io/portfolio-webpage/#/' color='inherit'>\r\n          HC\r\n        </Button>\r\n      </CardContent>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  LinearProgress,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport { fetchWorldTdyYtd } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n    width: '50% !important'\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    margin: '2% !important',\r\n    padding: '2%',\r\n    textAlign: 'justify',\r\n    width: '76%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '0% !important',\r\n    marginBottom: '1% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  root1: {\r\n    padding: '1%',\r\n    textAlign: 'justify',\r\n    marginTop: '0% !important',\r\n    // marginBottom: '1% !important',\r\n    // borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n  tables: {\r\n    maxHeight: '240px',\r\n    width: '100% !important',\r\n  },\r\n  more: {\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst Cards = ({ data, date }) => {\r\n  const totalInfected = parseInt(data.TotalConfirmed);\r\n  const totalRecovered = parseInt(data.TotalRecovered);\r\n  const totalDeaths = parseInt(data.TotalDeaths);\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n\r\n  const styles = useStyles();\r\n\r\n  const [tdyData, setTdyData] = useState([]);\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"todayCases\", label: \"Newly Confirmed\" },\r\n    { id: \"todayDeaths\", label: \"New Deaths\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { today } = fetchedAPI;\r\n      const { yesterday } = fetchedAPI;\r\n      setTdyData(today);\r\n      setYtdData(yesterday);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const topDailyBar = (\r\n    tdyData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: tdyData.map(items => items.country),\r\n          datasets: [\r\n            {\r\n              label: 'New Cases',\r\n              backgroundColor: 'rgba(0,255,127, 0.5)',\r\n              data: tdyData.map(items => items.todayCases),\r\n            },\r\n            {\r\n              label: 'Deaths',\r\n              backgroundColor: 'rgba(0, 0, 225, 0.5)',\r\n              data: tdyData.map(items => items.todayDeaths),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: true },\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    ) : <LinearProgress />\r\n  )\r\n\r\n  const topYtdBar = (\r\n    ytdData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ytdData.map(items => items.country),\r\n          datasets: [\r\n            {\r\n              label: 'New Cases',\r\n              backgroundColor: 'rgb(128,0,128, 0.5)',\r\n              data: ytdData.map(items => items.todayCases),\r\n            },\r\n            {\r\n              label: 'Deaths',\r\n              backgroundColor: 'yellow',\r\n              data: ytdData.map(items => items.todayDeaths),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: true },\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    ) : <LinearProgress />\r\n  )\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div >\r\n      <Grid container spacing={3} justify='center' borderRadius={16}>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Typography variant='h5' color='textSecondary' gutterBottom style={{ textAlign: 'center' }}>Top 10 Today <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">📈</span></Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n          <Grid item>\r\n            <TableContainer className={styles.tables}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell key={column.id}>{column.label}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {tdyData.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={row.country}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id}>{value}</TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <div className={styles.container}>\r\n            <Grid item>\r\n              {topDailyBar}\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Typography variant='h5' color='textSecondary' gutterBottom style={{ textAlign: 'center' }}>Top 10 Yesterday <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">📈</span></Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n          <Grid item>\r\n            <TableContainer className={styles.tables}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell key={column.id}>{column.label}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {ytdData.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={row.country}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id}>{value}</TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <div className={styles.container}>\r\n            <Grid item>\r\n              {topYtdBar}\r\n            </Grid>\r\n          </div>\r\n          <Grid item>\r\n            <Typography variant='button' ><Button color='secondary' className={styles.more} href='#/toptensummary'>Comparison Tables Click Here</Button></Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Cards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { fetchWorldDailyData } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    justifyItems: 'center',\r\n  },\r\n  card: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '0% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  card1: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '0% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    marginTop: '0.5%',\r\n    marginLeft: '10%',\r\n    width: '80%',\r\n\r\n  },\r\n  more: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  }\r\n})\r\n\r\nconst Charts = ({ data }) => {\r\n  const [worldDailyData, setWorldData] = useState([]);\r\n\r\n  const totalInfected = (data.TotalConfirmed);\r\n  const totalRecovered = data.TotalRecovered;\r\n  const totalDeaths = data.TotalDeaths;\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n  const total = totalInfected + totalDeaths + totalRecovered;\r\n  console.log(totalInfected)\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setWorldData(await fetchWorldDailyData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const worldBreakdown = (\r\n    totalInfected ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths', 'Active'],\r\n          datasets: [{\r\n            data: [totalInfected, totalRecovered, totalDeaths, totalActive],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\", \"rgb(0, 225, 0, 0.5)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const worldLineGraph = (\r\n    worldDailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: worldDailyData.map(items => new Date(items.last_update).toDateString()),\r\n          datasets: [{\r\n            data: worldDailyData.map(items => items.total_cases),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => items.total_deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_recovered;\r\n            }),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_cases - items.total_deaths - items.total_recovered;\r\n            }),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 3\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : null\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} lg={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {worldLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Breakdown</Typography>\r\n            {worldBreakdown}\r\n            <Typography variant='button' align='center'>Death Rate: {(totalDeaths / total * 100).toFixed(2)}%</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Charts;","import React from 'react';\r\nimport Cards from './Components/Cards/Cards';\r\nimport Charts from './Components/Charts/Charts';\r\nimport TopBar from './Components/TopBar/TopBar';\r\n\r\nimport { fetchData } from './api-handler/index';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    data: {},\r\n    dataDynamic: {},\r\n    date: '',\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData.Global });\r\n    this.setState({ date: fetchedData.Date });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data } = this.state;\r\n    const { date } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n          <TopBar />\r\n          <Cards data={data} date={date} />\r\n          <Charts data={data} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button\r\n} from \"@material-ui/core\";\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  more: {\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst TopTenTables = () => {\r\n  const styles = useStyles();\r\n  const [tdyData, setTdyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { today } = fetchedAPI;\r\n      setTdyData(today);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"cases\", label: \"Total Cases\" },\r\n    { id: \"todayCases\", label: \"New Cases\" },\r\n    { id: \"deaths\", label: \"Total Deaths\" },\r\n    { id: \"recovered\", label: \"Total Recovered\" },\r\n    { id: \"todayRecovered\", label: \"New Recovered\" },\r\n    { id: \"active\", label: \"Active\" },\r\n    { id: \"casesPerOneMillion\", label: \"Cases per million\" },\r\n    { id: \"deathsPerOneMillion\", label: \"Deaths per million\" },\r\n    { id: \"population\", label: \"Total Population\" },\r\n    { id: \"continent\", label: \"Continent\" }\r\n  ];\r\n\r\n  if (!tdyData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummaryytd'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <TableContainer className={styles.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead className={styles.head}>\r\n                    <TableRow>\r\n                      {columns.map((column) => (\r\n                        <TableCell key={column.id}>{column.label}</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {tdyData.map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row.country}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id}>{value}</TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <caption>Courtesy of https://disease.sh/</caption>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopTenTables;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst TablesYtd = () => {\r\n  const styles = useStyles();\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { yesterdayAll } = fetchedAPI;\r\n      setYtdData(yesterdayAll);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"cases\", label: \"Total Cases\" },\r\n    { id: \"todayCases\", label: \"New Cases\" },\r\n    { id: \"deaths\", label: \"Total Deaths\" },\r\n    { id: \"recovered\", label: \"Total Recovered\" },\r\n    { id: \"todayRecovered\", label: \"New Recovered\" },\r\n    { id: \"active\", label: \"Active\" },\r\n    { id: \"casesPerOneMillion\", label: \"Cases per million\" },\r\n    { id: \"deathsPerOneMillion\", label: \"Deaths per million\" },\r\n    { id: \"population\", label: \"Total Population\" },\r\n    { id: \"continent\", label: \"Continent\" }\r\n  ];\r\n\r\n  if (!ytdData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Grid item>\r\n              <Button color='secondary' className={styles.more} href='#/summary'>Today</Button>\r\n              <Button color='secondary' className={styles.more} href='#/ytdsummary'>Yesterday</Button>\r\n              <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n            </Grid>\r\n            <CardContent>\r\n              <TableContainer className={styles.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead className={styles.head}>\r\n                    <TableRow>\r\n                      {columns.map((column) => (\r\n                        <TableCell key={column.id}>{column.label}</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {ytdData.map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row.CountryCode}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id}>{value}</TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <caption>Courtesy of https://disease.sh/</caption>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TablesYtd;","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button\r\n} from \"@material-ui/core\";\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst TopTenYtd = () => {\r\n  const styles = useStyles();\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { yesterday } = fetchedAPI;\r\n      setYtdData(yesterday);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"cases\", label: \"Total Cases\" },\r\n    { id: \"todayCases\", label: \"New Cases\" },\r\n    { id: \"deaths\", label: \"Total Deaths\" },\r\n    { id: \"recovered\", label: \"Total Recovered\" },\r\n    { id: \"todayRecovered\", label: \"New Recovered\" },\r\n    { id: \"active\", label: \"Active\" },\r\n    { id: \"casesPerOneMillion\", label: \"Cases per million\" },\r\n    { id: \"deathsPerOneMillion\", label: \"Deaths per million\" },\r\n    { id: \"population\", label: \"Total Population\" },\r\n    { id: \"continent\", label: \"Continent\" }\r\n  ];\r\n\r\n  if (!ytdData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummaryytd'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <TableContainer className={styles.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead className={styles.head}>\r\n                    <TableRow>\r\n                      {columns.map((column) => (\r\n                        <TableCell key={column.id}>{column.label}</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {ytdData.map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row.country}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id}>{value}</TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <caption>Courtesy of https://disease.sh/</caption>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopTenYtd;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Tables from './Components/Tables/Tables';\r\nimport Singapore from './Components/sgData/Singapore';\r\nimport News from './Components/News/News';\r\nimport About from './Components/About/About';\r\nimport App from './App';\r\nimport TopTenTables from './Components/Tables/TopTenTables';\r\nimport TablesYtd from './Components/Tables/TablesYtd';\r\nimport TopTenYtd from './Components/Tables/TopTenYtd';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/' component={App} />\r\n      <Route path='/summary' component={Tables} />\r\n      <Route path='/ytdsummary' component={TablesYtd} />\r\n      <Route path='/toptensummary' component={TopTenTables} />\r\n      <Route path='/toptensummaryytd' component={TopTenYtd} />\r\n      <Route path='/singapore' component={Singapore} />\r\n      <Route path='/news' component={News} />\r\n      <Route path='/about' component={About} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nimport Routes from './Route';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename='/covid-dash/'>\r\n    <Routes />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}