{"version":3,"sources":["Components/TopBar/TopBar.jsx","api-handler/index.js","Components/Tables/Tables.jsx","Components/Cards/SGCards.jsx","Components/sgData/Singapore.jsx","Components/News/News.jsx","Components/About/About.jsx","Components/Cards/Cards.jsx","Components/Charts/Charts.jsx","App.js","Route.js","index.js"],"names":["useStyles","makeStyles","root","backgroundColor","padding","margin","TopBar","styles","AppBar","position","color","elevation","className","Toolbar","Grid","justify","container","spacing","item","Button","href","button","Typography","variant","size","current","fetchData","a","axios","get","response","data","console","log","fetchDailyData","country","variableUrl","url","fetchWorldDailyData","reverse","fetchCurrentData","infected","confirmed","value","recovered","deaths","modifiedData","active","fetchSummaryData","dataSet","countriesData","Countries","fetchTopNews","items","fetchTopDaily","fetchSGData","hospitalizedData","community","inCommunityFacilites","stable","stableHospitalized","critical","criticalHospitalized","width","paddingLeft","maxHeight","card","Tables","useState","setData","useEffect","summaryData","fetchAPI","columns","id","label","map","CountryCode","Paper","align","component","Card","CardContent","TableContainer","Table","stickyHeader","aria-label","TableHead","head","TableRow","column","TableCell","key","TableBody","row","hover","role","tabIndex","LinearProgress","textAlign","marginBottom","borderRadius","marginTop","borderBottom","SGCards","sgData","getAPI","totalInfected","totalRecovered","totalDeaths","totalActive","xs","md","cx","gutterBottom","start","end","duration","separator","display","justifyContent","marginLeft","root1","card1","card2","card3","Singapore","dailyData","setDailyData","currentData","setCurrentData","hospitalData","setHospitalData","sgLineGraph","length","labels","Date","toDateString","datasets","Confirmed","borderColor","fill","Deaths","Recovered","Active","options","maintainAspectRatio","responsive","scales","xAxes","type","ticks","autoSkip","maxTicksLimit","yAxes","sgBarGraph","legend","hospitalBarGraph","activeBreakdown","info","direction","alignItems","borderTop","News","newsData","mapNews","index","gutterBotton","countries","countryCode","name","title","content","Link","publishedAt","toLocaleString","About","tables","more","Cards","date","parseInt","TotalConfirmed","TotalRecovered","TotalDeaths","topData","setTopData","fetchedData","topDailyBar","daily_cases","daily_deaths","stacked","style","justifyItems","Charts","worldDailyData","setWorldData","total","worldBreakdown","worldLineGraph","last_update","total_cases","total_deaths","total_recovered","lg","toFixed","App","state","dataDynamic","this","setState","Global","React","Component","Routes","exact","path","ReactDOM","render","basename","Route","document","getElementById"],"mappings":"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","file":"static/js/main.d6571f3e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Button, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)',\r\n    padding: '0% !important',\r\n    margin: '0% !important'\r\n  },\r\n})\r\n\r\nconst TopBar = () => {\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position='static' color='transparent' elevation={0} className={styles.root}>\r\n        <Toolbar>\r\n          <Grid\r\n            justify='space-evenly'\r\n            container\r\n            spacing={3}>\r\n            <Grid item>\r\n              <Button href='#/' className={styles.button} color=\"inherit\">\r\n                <Typography variant='h6'>\r\n                  𝗖𝗢𝗩𝗜𝗗🦠𝗧𝗥𝗔𝗖𝗞𝗘𝗥\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/singapore' color='inherit' className={styles.current}>\r\n                Singapore\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/summary' color='inherit' className={styles.current}>\r\n                Summary\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/news' color='inherit' className={styles.current}>\r\n                News\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/about' color='inherit' className={styles.current}>\r\n                About\r\n              </Button>\r\n            </Grid>\r\n          </Grid >\r\n        </Toolbar >\r\n      </AppBar >\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TopBar;","import axios from 'axios';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  const url = 'https://api.covid19api.com/total/country';\r\n  var variableUrl = url;\r\n  if (country) {\r\n    variableUrl = `${url}/${country}`;\r\n  }\r\n  if (!country) {\r\n    variableUrl = `${url}/singapore`;\r\n  }\r\n  try {\r\n    const response = await axios.get(variableUrl);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchWorldDailyData = async () => {\r\n  try {\r\n    const url = 'https://covid19-api.org/api/timeline';\r\n    const response = await axios.get(url);\r\n    return response.data.reverse();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries';\r\n    const response = await axios.get(url);\r\n    return response.data.countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchCurrentData = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries/Singapore';\r\n    const response = await axios.get(url);\r\n    const infected = response.data.confirmed.value;\r\n    const recovered = response.data.recovered.value;\r\n    const deaths = response.data.deaths.value;\r\n    const active = infected - deaths - recovered;\r\n    const modifiedData = { infected, recovered, active, deaths };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSummaryData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data;\r\n    const countriesData = dataSet.Countries;\r\n    return countriesData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopNews = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/news/trending';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data.items;\r\n    return dataSet;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopDaily = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/v3/analytics/dailyNewStats?limit=10';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSGData = async () => {\r\n  try {\r\n    const url = 'https://api.apify.com/v2/key-value-stores/yaPbKe9e5Et61bl7W/records/LATEST?disableRedirect=true';\r\n    const response = await axios.get(url);\r\n    const hospitalizedData = {\r\n      community: response.data.inCommunityFacilites,\r\n      stable: response.data.stableHospitalized,\r\n      critical: response.data.criticalHospitalized\r\n    }\r\n    return hospitalizedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchSummaryData } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '80%',\r\n    paddingLeft: '10%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst Tables = () => {\r\n  const styles = useStyles();\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const summaryData = await fetchSummaryData();\r\n      setData(summaryData);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { id: \"Country\", label: \"Country\" },\r\n    { id: \"NewConfirmed\", label: \"Newly Confirmed\" },\r\n    { id: \"NewDeaths\", label: \"New Deaths\" },\r\n    { id: \"NewRecovered\", label: \"Newly Recovered\" },\r\n    { id: \"TotalConfirmed\", label: \"Confirmed\" },\r\n    { id: \"TotalDeaths\", label: \"Deaths\" },\r\n    { id: \"TotalRecovered\", label: \"Recovered\" },\r\n  ];\r\n\r\n  if (!data.map(item => item.CountryCode)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <TableContainer className={styles.container}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                  <TableHead className={styles.head}>\r\n                    <TableRow>\r\n                      {columns.map((column) => (\r\n                        <TableCell key={column.id}>{column.label}</TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {data.map((row) => {\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          tabIndex={-1}\r\n                          key={row.CountryCode}\r\n                        >\r\n                          {columns.map((column) => {\r\n                            const value = row[column.id];\r\n                            return (\r\n                              <TableCell key={column.id}>{value}</TableCell>\r\n                            );\r\n                          })}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                  <caption>Courtesy of https://api.covid19api.com</caption>\r\n                </Table>\r\n              </TableContainer>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { fetchCurrentData } from '../../api-handler';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    margin: 0,\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    marginBottom: '0% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    padding: '2% !important',\r\n    margin: '10% !important',\r\n    marginTop: '4% !important',\r\n    marginBottom: '2% !important',\r\n    textAlign: 'justify',\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n});\r\n\r\nconst SGCards = () => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const getAPI = async () => {\r\n      const sgData = await fetchCurrentData();\r\n      setData(sgData);\r\n    }\r\n    getAPI()\r\n  }, []);\r\n  const totalInfected = data.infected;\r\n  const totalRecovered = data.recovered;\r\n  const totalDeaths = data.deaths;\r\n  const totalActive = data.active;\r\n\r\n  const styles = useStyles();\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify='center'>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SGCards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, HorizontalBar, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, Paper } from '@material-ui/core';\r\nimport { fetchDailyData, fetchCurrentData, fetchSGData } from '../../api-handler/index';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport SGCards from '../Cards/SGCards';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    marginTop: '0% !important',\r\n  },\r\n  root: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '2% !important'\r\n  },\r\n  root1: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '1% !important'\r\n  },\r\n  card: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card1: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card2: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card3: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  }\r\n})\r\n\r\nconst Singapore = () => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  const [currentData, setCurrentData] = useState({});\r\n  const [hospitalData, setHospitalData] = useState({});\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n      setCurrentData(await fetchCurrentData());\r\n      setHospitalData(await fetchSGData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const sgLineGraph = (\r\n    dailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: dailyData.map(items => new Date(items.Date).toDateString()),\r\n          datasets: [{\r\n            data: dailyData.map(items => items.Confirmed),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Recovered),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Active),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 4\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : null\r\n  )\r\n\r\n  const sgBarGraph = (\r\n    currentData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Confirmed', 'Recovered', 'Active', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)', 'rgba(255, 0, 0, 0.3)'],\r\n              data: [currentData.infected, currentData.recovered, currentData.active, currentData.deaths],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const hospitalBarGraph = (\r\n    hospitalData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)'],\r\n              data: [hospitalData.community, hospitalData.stable, hospitalData.critical]\r\n            }\r\n          ]\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />) : null\r\n  )\r\n\r\n  const activeBreakdown = (\r\n    hospitalData ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [{\r\n            data: [hospitalData.community, hospitalData.stable, hospitalData.critical],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <div className={styles.info}>\r\n        <SGCards />\r\n      </div>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {sgLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Summary</Typography>\r\n            {sgBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={0} className={styles.root1}>\r\n        <Grid xs={12} container alignItems='center'>\r\n          <Grid item component={Card} className={styles.card2}>\r\n            <Typography variant='button' align='center'>Breakdown of Active Cases</Typography>\r\n            {activeBreakdown}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card3}>\r\n            <Typography variant='button' align='center'>{currentData.active} Active Cases in Hospital</Typography>\r\n            {hospitalBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Singapore;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, CardContent, Typography, Link, LinearProgress } from '@material-ui/core';\r\nimport { countries } from 'country-data';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport { fetchTopNews } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'justify',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst News = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const newsData = await fetchTopNews();\r\n      setData(newsData);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  if (!data) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  const mapNews = data.map((items, index) => {\r\n    return (\r\n      <div>\r\n        <CardContent className={styles.card}>\r\n          <Typography variant='h6' color='textPrimary' gutterBotton>{countries[items.countryCode].name}</Typography>\r\n          <Typography variant='h6' color='primary' gutterBottom>{items.title}</Typography>\r\n          <Typography variant='body2'>{items.content}</Typography>\r\n          <Typography variant='caption'>\r\n            Source:&nbsp;\r\n            <Link href={items.url}>{items.url}</Link>\r\n          </Typography>\r\n          <Typography variant='body2'>Published:&nbsp;{new Date(items.publishedAt).toLocaleString()}</Typography>\r\n        </CardContent>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Grid container spacing={0} align='center'>\r\n        <Grid item component={Card}>\r\n          {mapNews}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport { CardContent, Typography, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst About = () => {\r\n  const styles = useStyles();\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Mentions</Typography>\r\n        <Button href='https://api.covid19api.com'>covid19api</Button>\r\n        <Button href='https://covid19-api.org'>covid19-api</Button>\r\n        <Button href='https://covid19.mathdro.id'>covid19.mathdro.id</Button>\r\n        <Button href='https://api.coronatracker.com'>CoronaTrackerAPI</Button>\r\n        <Button href='https://api.apify.com'>Apify API</Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Content</Typography>\r\n        <Typography variant='button'>Made with React, material-ui and chartjs</Typography>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Code and Contributors</Typography>\r\n        <Button size='large' href=' https://github.com/thchong-code/covid-dash' color='inherit'>\r\n          Github\r\n        </Button>\r\n        <Button size='large' href='https://github.com/imsamuel' color='inherit'>\r\n          imsamuel\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Find me !</Typography>\r\n        <Button size='large' href=' https://thchong-code.github.io/portfolio-webpage/#/' color='inherit'>\r\n          HC\r\n        </Button>\r\n      </CardContent>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  LinearProgress,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport { fetchTopDaily } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n    width: '50% !important'\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    margin: '2% !important',\r\n    padding: '2%',\r\n    textAlign: 'justify',\r\n    width: '76%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '0% !important',\r\n    marginBottom: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n  tables: {\r\n    maxHeight: '240px',\r\n    width: '100% !important',\r\n  },\r\n  more: {\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst Cards = ({ data, date }) => {\r\n  const totalInfected = parseInt(data.TotalConfirmed);\r\n  const totalRecovered = parseInt(data.TotalRecovered);\r\n  const totalDeaths = parseInt(data.TotalDeaths);\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n\r\n  const styles = useStyles();\r\n\r\n  const [topData, setTopData] = useState([]);\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"daily_cases\", label: \"Newly Confirmed\" },\r\n    { id: \"daily_deaths\", label: \"New Deaths\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedData = await fetchTopDaily();\r\n      setTopData(fetchedData);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const topDailyBar = (\r\n    topData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: topData.map(items => items.country),\r\n          datasets: [\r\n            {\r\n              label: 'New Cases',\r\n              backgroundColor: 'rgba(0,255,127, 0.5)',\r\n              data: topData.map(items => items.daily_cases),\r\n            },\r\n            {\r\n              label: 'Deaths',\r\n              backgroundColor: 'rgba(0, 0, 225, 0.5)',\r\n              data: topData.map(items => items.daily_deaths),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: true },\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    ) : <LinearProgress />\r\n  )\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div >\r\n      <Grid container spacing={3} justify='center' borderRadius={16}>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Typography variant='h5' color='textSecondary' gutterBottom style={{ textAlign: 'center' }}>Top 10 Daily Figures <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">📈</span> (Updated live)</Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n          <Grid item>\r\n            <TableContainer className={styles.tables}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell key={column.id}>{column.label}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {topData.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={row.country}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id}>{value}</TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <div className={styles.container}>\r\n            <Grid item>\r\n              {topDailyBar}\r\n            </Grid>\r\n          </div>\r\n          <Grid item>\r\n            <Typography variant='button' ><Button className={styles.more} href='#/summary'>For more details click here</Button></Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </Paper>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Cards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, LinearProgress, Paper, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { fetchWorldDailyData } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    justifyItems: 'center',\r\n  },\r\n  card: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '1% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  card1: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '1% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    marginTop: '0.5%',\r\n    marginLeft: '10%',\r\n    width: '80%',\r\n\r\n  },\r\n  more: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  }\r\n})\r\n\r\nconst Charts = ({ data }) => {\r\n  const [worldDailyData, setWorldData] = useState([]);\r\n\r\n  const totalInfected = (data.TotalConfirmed);\r\n  const totalRecovered = data.TotalRecovered;\r\n  const totalDeaths = data.TotalDeaths;\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n  const total = totalInfected + totalDeaths + totalRecovered;\r\n  console.log(totalInfected)\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setWorldData(await fetchWorldDailyData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const worldBreakdown = (\r\n    totalInfected ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths', 'Active'],\r\n          datasets: [{\r\n            data: [totalInfected, totalRecovered, totalDeaths, totalActive],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const worldLineGraph = (\r\n    worldDailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: worldDailyData.map(items => new Date(items.last_update).toDateString()),\r\n          datasets: [{\r\n            data: worldDailyData.map(items => items.total_cases),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => items.total_deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_recovered;\r\n            }),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_cases - items.total_deaths - items.total_recovered;\r\n            }),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 3\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : <LinearProgress />\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} lg={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {worldLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Breakdown</Typography>\r\n            {worldBreakdown}\r\n            <Typography variant='button' align='center'>Death Rate: {(totalDeaths / total * 100).toFixed(2)}%</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Charts;","import React from 'react';\r\nimport Cards from './Components/Cards/Cards';\r\nimport Charts from './Components/Charts/Charts';\r\nimport TopBar from './Components/TopBar/TopBar';\r\n\r\nimport { fetchData } from './api-handler/index';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    data: {},\r\n    dataDynamic: {},\r\n    date: '',\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData.Global });\r\n    this.setState({ date: fetchedData.Date });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data } = this.state;\r\n    const { date } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n          <TopBar />\r\n          <Cards data={data} date={date} />\r\n          <Charts data={data} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Tables from './Components/Tables/Tables';\r\nimport Singapore from './Components/sgData/Singapore';\r\nimport News from './Components/News/News';\r\nimport About from './Components/About/About';\r\nimport App from './App';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/' component={App} />\r\n      <Route path='/summary' component={Tables} />\r\n      <Route path='/singapore' component={Singapore} />\r\n      <Route path='/news' component={News} />\r\n      <Route path='/about' component={About} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nimport Routes from './Route';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename='/covid-dash/'>\r\n    <Routes />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}