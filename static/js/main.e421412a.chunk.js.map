{"version":3,"sources":["../node_modules/jspdf/dist sync","Components/TopBar/TopBar.jsx","api-handler/index.js","Components/Tables/Tables.jsx","Components/Cards/SGCards.jsx","Components/sgData/Singapore.jsx","Components/News/News.jsx","Components/About/About.jsx","Components/Cards/Cards.jsx","Components/Charts/Charts.jsx","App.js","Components/Tables/TopTenTables.jsx","Components/Tables/TablesYtd.jsx","Components/Tables/TopTenYtd.jsx","Route.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","useStyles","makeStyles","root","backgroundColor","padding","margin","root1","textAlign","marginTop","TopBar","styles","AppBar","position","color","elevation","className","Toolbar","Grid","justify","container","spacing","item","Button","href","button","Typography","variant","role","aria-label","size","current","onClick","window","location","reload","Paper","target","fetchData","a","axios","get","response","data","console","log","fetchDailyData","country","variableUrl","url","fetchWorldDailyData","reverse","fetchCurrentData","infected","confirmed","value","recovered","deaths","modifiedData","active","fetchTopNews","dataSet","items","fetchSGData","hospitalizedData","community","inCommunityFacilites","stable","stableHospitalized","critical","criticalHospitalized","fetchWorldTdyYtd","urlTodayUnsorted","urlYtd","urlYtdUnsorted","todayResponse","ytdResponse","todayRes","ytdRes","today","slice","todayAll","yesterday","yesterdayAll","width","maxHeight","card","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Tables","useState","tdyData","setTdyData","useEffect","fetchedAPI","fetchAPI","map","LinearProgress","align","more","component","Card","CardContent","icons","columns","field","title","hash","options","sorting","marginBottom","borderRadius","borderBottom","SGCards","setData","sgData","getAPI","totalInfected","totalRecovered","totalDeaths","totalActive","xs","md","cx","gutterBottom","start","end","duration","separator","display","justifyContent","marginLeft","card1","card2","card3","Singapore","dailyData","setDailyData","currentData","setCurrentData","hospitalData","setHospitalData","sgLineGraph","length","labels","Date","toDateString","datasets","Confirmed","label","borderColor","fill","Deaths","Recovered","Active","maintainAspectRatio","responsive","scales","xAxes","type","ticks","autoSkip","maxTicksLimit","yAxes","sgBarGraph","legend","hospitalBarGraph","activeBreakdown","info","direction","alignItems","borderTop","News","newsData","mapNews","index","gutterBotton","countries","countryCode","name","content","Link","publishedAt","toLocaleString","About","tables","Cards","date","parseInt","TotalConfirmed","TotalRecovered","TotalDeaths","ytdData","setYtdData","topDailyBar","todayCases","todayDeaths","stacked","topYtdBar","style","TableContainer","Table","stickyHeader","TableHead","TableRow","column","TableCell","key","TableBody","row","hover","tabIndex","justifyItems","Charts","worldDailyData","setWorldData","total","worldBreakdown","worldLineGraph","last_update","total_cases","total_deaths","total_recovered","lg","toFixed","App","state","dataDynamic","fetchedData","this","setState","Global","React","Component","TopTenTables","TablesYtd","TopTenYtd","Routes","exact","path","ReactDOM","render","basename","Route","document","getElementById"],"mappings":"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","file":"static/js/main.e421412a.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 368;","import React from 'react';\r\nimport { AppBar, Toolbar, Typography, Button, Grid, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)',\r\n    padding: '0% !important',\r\n    margin: '0% !important'\r\n  },\r\n  root1: {\r\n    padding: '1%',\r\n    textAlign: 'justify',\r\n    marginTop: '0% !important',\r\n    // marginBottom: '1% !important',\r\n    // borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  }\r\n})\r\n\r\nconst TopBar = () => {\r\n  const styles = useStyles();\r\n\r\n  const reloadPage = () => window.location.reload(false)\r\n\r\n  return (\r\n    <>\r\n      <AppBar position='static' color='transparent' elevation={0} className={styles.root}>\r\n        <Toolbar>\r\n          <Grid\r\n            justify='space-evenly'\r\n            container\r\n            spacing={3}>\r\n            <Grid item>\r\n              <Button href='#/' className={styles.button} color=\"inherit\">\r\n                <Typography variant='h6'>\r\n                  <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">𝗖𝗢𝗩𝗜𝗗🦠𝗧𝗥𝗔𝗖𝗞𝗘𝗥</span>\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/' color='inherit' className={styles.current}>\r\n                Home\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/singapore' color='inherit' className={styles.current}>\r\n                Singapore\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/summary' color='inherit' className={styles.current}>\r\n                Summary\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/news' color='inherit' className={styles.current}>\r\n                News\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' href=' #/about' color='inherit' className={styles.current}>\r\n                About\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size='large' onClick={() => reloadPage()} color='secondary' className={styles.current}>\r\n                <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">🔄</span>\r\n              </Button>\r\n            </Grid>\r\n          </Grid >\r\n        </Toolbar >\r\n      </AppBar >\r\n      <Paper elevation={0} className={styles.root1}>\r\n        <Typography variant='button'>\r\n          For the latest travel advisories visit\r\n          <Button color='secondary' href='https://www.who.int/emergencies/diseases/novel-coronavirus-2019/travel-advice' target=\"_blank\">World Health Organisation</Button>\r\n        </Typography>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TopBar;","import axios from 'axios';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  const url = 'https://api.covid19api.com/total/country';\r\n  var variableUrl = url;\r\n  if (country) {\r\n    variableUrl = `${url}/${country}`;\r\n  }\r\n  if (!country) {\r\n    variableUrl = `${url}/singapore`;\r\n  }\r\n  try {\r\n    const response = await axios.get(variableUrl);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchWorldDailyData = async () => {\r\n  try {\r\n    const url = 'https://covid19-api.org/api/timeline';\r\n    const response = await axios.get(url);\r\n    return response.data.reverse();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries';\r\n    const response = await axios.get(url);\r\n    return response.data.countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchCurrentData = async () => {\r\n  try {\r\n    const url = 'https://covid19.mathdro.id/api/countries/Singapore';\r\n    const response = await axios.get(url);\r\n    const infected = response.data.confirmed.value;\r\n    const recovered = response.data.recovered.value;\r\n    const deaths = response.data.deaths.value;\r\n    const active = infected - deaths - recovered;\r\n    const modifiedData = { infected, recovered, active, deaths };\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSummaryData = async () => {\r\n  try {\r\n    const url = 'https://api.covid19api.com/summary';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data;\r\n    const countriesData = dataSet.Countries;\r\n    return countriesData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopNews = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/news/trending';\r\n    const response = await axios.get(url);\r\n    const dataSet = response.data.items;\r\n    return dataSet;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchTopDaily = async () => {\r\n  try {\r\n    const url = 'https://api.coronatracker.com/v3/analytics/dailyNewStats?limit=10';\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchSGData = async () => {\r\n  try {\r\n    const url = 'https://api.apify.com/v2/key-value-stores/yaPbKe9e5Et61bl7W/records/LATEST?disableRedirect=true';\r\n    const response = await axios.get(url);\r\n    const hospitalizedData = {\r\n      community: response.data.inCommunityFacilites,\r\n      stable: response.data.stableHospitalized,\r\n      critical: response.data.criticalHospitalized\r\n    }\r\n    return hospitalizedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport const fetchWorldTdyYtd = async () => {\r\n  try {\r\n    const urlToday = 'https://disease.sh/v3/covid-19/countries?sort=todayCases';\r\n    const urlTodayUnsorted = 'https://disease.sh/v3/covid-19/countries';\r\n    const urlYtd = 'https://disease.sh/v3/covid-19/countries?yesterday=true&sort=todayCases';\r\n    const urlYtdUnsorted = 'https://disease.sh/v3/covid-19/countries?yesterday=true';\r\n    const todayResponse = await axios.get(urlToday);\r\n    const ytdResponse = await axios.get(urlYtd);\r\n    const todayRes = await axios.get(urlTodayUnsorted);\r\n    const ytdRes = await axios.get(urlYtdUnsorted);\r\n    const modifiedData = {\r\n      today: todayResponse.data.slice(0, 10),\r\n      todayAll: todayRes.data,\r\n      yesterday: ytdResponse.data.slice(0, 10),\r\n      yesterdayAll: ytdRes.data\r\n    }\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport MaterialTable from 'material-table';\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Tables = () => {\r\n  const styles = useStyles();\r\n  const [tdyData, setTdyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { todayAll } = fetchedAPI;\r\n      setTdyData(todayAll);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"country\", title: \"Country\" },\r\n    { field: \"cases\", title: \"Total Cases\" },\r\n    { field: \"todayCases\", title: \"New Cases\" },\r\n    { field: \"deaths\", title: \"Total Deaths\" },\r\n    { field: \"recovered\", title: \"Total Recovered\" },\r\n    { field: \"todayRecovered\", title: \"New Recovered\" },\r\n    { field: \"active\", title: \"Active\" },\r\n    { field: \"casesPerOneMillion\", title: \"Cases per million\" },\r\n    { field: \"deathsPerOneMillion\", title: \"Deaths per million\" },\r\n    { field: \"population\", title: \"Total Population\" },\r\n    { field: \"continent\", title: \"Continent\" }\r\n  ];\r\n\r\n  if (!tdyData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  var dataSet = tdyData;\r\n  // const mapData = (dataSet) => {\r\n  //   dataSet.map(item => {\r\n  //     item.country = item.country.toLocaleString()\r\n  //     item.cases = item.cases.toLocaleString()\r\n  //     item.todayCases = item.todayCases.toLocaleString()\r\n  //     item.deaths = item.deaths.toLocaleString()\r\n  //     item.recovered = item.recovered.toLocaleString()\r\n  //     item.todayRecovered = item.todayRecovered.toLocaleString()\r\n  //     item.active = item.active.toLocaleString()\r\n  //     item.casesPerOneMillion = item.casesPerOneMillion.toLocaleString()\r\n  //     item.deathsPerOneMillion = item.deathsPerOneMillion.toLocaleString()\r\n  //     item.population = item.population.toLocaleString()\r\n  //     item.continent = item.continent.toLocaleString()\r\n  //     return item;\r\n  //   })\r\n  // }\r\n  // mapData(dataSet);\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/summary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/ytdsummary'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <MaterialTable\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                title={window.location.hash === \"#/summary\" ? \"Today's Summary\" : \"Yesterday's Summary\"}\r\n                data={dataSet}\r\n                options={{\r\n                  sorting: true,\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tables;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Grid, Card, CardContent, Typography } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport { fetchCurrentData } from '../../api-handler';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    margin: 0,\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    marginBottom: '0% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    padding: '2% !important',\r\n    margin: '10% !important',\r\n    marginTop: '4% !important',\r\n    marginBottom: '2% !important',\r\n    textAlign: 'justify',\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n});\r\n\r\nconst SGCards = () => {\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    const getAPI = async () => {\r\n      const sgData = await fetchCurrentData();\r\n      setData(sgData);\r\n    }\r\n    getAPI()\r\n  }, []);\r\n  const totalInfected = data.infected;\r\n  const totalRecovered = data.recovered;\r\n  const totalDeaths = data.deaths;\r\n  const totalActive = data.active;\r\n\r\n  const styles = useStyles();\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify='center'>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SGCards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, HorizontalBar, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, Paper } from '@material-ui/core';\r\nimport { fetchDailyData, fetchCurrentData, fetchSGData } from '../../api-handler/index';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport SGCards from '../Cards/SGCards';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    justifyContent: 'center',\r\n    textAlign: 'center',\r\n    marginTop: '0% !important',\r\n  },\r\n  root: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '2% !important'\r\n  },\r\n  root1: {\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '1% !important'\r\n  },\r\n  card: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card1: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card2: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  },\r\n  card3: {\r\n    width: '50%',\r\n    padding: '2% !important',\r\n    marginTop: '0% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n  }\r\n})\r\n\r\nconst Singapore = () => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  const [currentData, setCurrentData] = useState({});\r\n  const [hospitalData, setHospitalData] = useState({});\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setDailyData(await fetchDailyData());\r\n      setCurrentData(await fetchCurrentData());\r\n      setHospitalData(await fetchSGData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const sgLineGraph = (\r\n    dailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: dailyData.map(items => new Date(items.Date).toDateString()),\r\n          datasets: [{\r\n            data: dailyData.map(items => items.Confirmed),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Recovered),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: dailyData.map(items => items.Active),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 4\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : null\r\n  )\r\n\r\n  const sgBarGraph = (\r\n    currentData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Confirmed', 'Recovered', 'Active', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)', 'rgba(255, 0, 0, 0.3)'],\r\n              data: [currentData.infected, currentData.recovered, currentData.active, currentData.deaths],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const hospitalBarGraph = (\r\n    hospitalData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(255,165,0, 0.5)', 'rgba(0,255,127, 0.5)', 'rgba(255,255,0, 0.5)'],\r\n              data: [hospitalData.community, hospitalData.stable, hospitalData.critical]\r\n            }\r\n          ]\r\n        }}\r\n        options={{\r\n          legend: { display: false }\r\n        }}\r\n      />) : null\r\n  )\r\n\r\n  const activeBreakdown = (\r\n    hospitalData ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Community', 'Stable', 'Critical'],\r\n          datasets: [{\r\n            data: [hospitalData.community, hospitalData.stable, hospitalData.critical],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <div className={styles.info}>\r\n        <SGCards />\r\n      </div>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {sgLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Summary</Typography>\r\n            {sgBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={0} className={styles.root1}>\r\n        <Grid xs={12} container alignItems='center'>\r\n          <Grid item component={Card} className={styles.card2}>\r\n            <Typography variant='button' align='center'>Breakdown of Active Cases</Typography>\r\n            {activeBreakdown}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card3}>\r\n            <Typography variant='button' align='center'>{currentData.active} Active Cases in Hospital</Typography>\r\n            {hospitalBarGraph}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Singapore;","import React, { useState, useEffect } from 'react';\r\nimport { Grid, Card, CardContent, Typography, Link, LinearProgress } from '@material-ui/core';\r\nimport { countries } from 'country-data';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\nimport { fetchTopNews } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'justify',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst News = () => {\r\n  const [data, setData] = useState([]);\r\n\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const newsData = await fetchTopNews();\r\n      setData(newsData);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  if (!data) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  const mapNews = data.map((items, index) => {\r\n    return (\r\n      <div>\r\n        <CardContent className={styles.card}>\r\n          <Typography variant='h6' color='textPrimary' gutterBotton>{countries[items.countryCode].name}</Typography>\r\n          <Typography variant='h6' color='primary' gutterBottom>{items.title}</Typography>\r\n          <Typography variant='body2'>{items.content}</Typography>\r\n          <Typography variant='caption'>\r\n            Source:&nbsp;\r\n            <Link href={items.url} target=\"_blank\">{items.url}</Link>\r\n          </Typography>\r\n          <Typography variant='body2'>Published:&nbsp;{new Date(items.publishedAt).toLocaleString()}</Typography>\r\n        </CardContent>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Grid container spacing={0} align='center'>\r\n        <Grid item component={Card}>\r\n          {mapNews}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport { CardContent, Typography, Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\n\r\nimport TopBar from '../TopBar/TopBar';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)',\r\n    borderRadius: '12px',\r\n    borderTop: '12px solid rgb(64,224,208)',\r\n    width: '80%',\r\n    marginLeft: '10% !important',\r\n    textAlign: 'justify'\r\n  },\r\n})\r\n\r\nconst About = () => {\r\n  const styles = useStyles();\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Mentions</Typography>\r\n        <Button href='https://api.covid19api.com' target=\"_blank\">covid19api</Button>\r\n        <Button href='https://covid19-api.org' target=\"_blank\">covid19-api</Button>\r\n        <Button href='https://covid19.mathdro.id' target=\"_blank\">covid19.mathdro.id</Button>\r\n        <Button href='https://api.coronatracker.com' target=\"_blank\">CoronaTrackerAPI</Button>\r\n        <Button href='https://api.apify.com' target=\"_blank\">Apify API</Button>\r\n        <Button href='https://disease.sh/' target=\"_blank\">\r\n          disease.sh\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Content</Typography>\r\n        <Typography variant='button'>Made with React, material-ui and chartjs</Typography>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Code and Contributors</Typography>\r\n        <Button size='large' href=' https://github.com/thchong-code/covid-dash' target=\"_blank\" color='inherit'>\r\n          Github\r\n        </Button>\r\n        <Button size='large' href='https://github.com/imsamuel' target=\"_blank\" color='inherit'>\r\n          imsamuel\r\n        </Button>\r\n      </CardContent>\r\n      <CardContent elevation={1} className={styles.card}>\r\n        <Typography align='inherit' variant='h5'>Find me !</Typography>\r\n        <Button size='large' href=' https://thchong-code.github.io/portfolio-webpage/#/' target=\"_blank\" color='inherit'>\r\n          HC\r\n        </Button>\r\n      </CardContent>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default About;","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Paper,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  LinearProgress,\r\n  Button\r\n} from '@material-ui/core';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport { fetchWorldTdyYtd } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    textAlign: 'center',\r\n    width: '50% !important'\r\n  },\r\n  card: {\r\n    margin: '2% !important',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    margin: '2% !important',\r\n    padding: '2%',\r\n    textAlign: 'justify',\r\n    width: '76%',\r\n    marginLeft: '10% !important',\r\n    marginTop: '0% !important',\r\n    marginBottom: '1% !important',\r\n    borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  root1: {\r\n    padding: '1%',\r\n    textAlign: 'justify',\r\n    marginTop: '0% !important',\r\n    // marginBottom: '1% !important',\r\n    // borderRadius: '12px',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  },\r\n  infected: {\r\n    borderBottom: '20px solid orange',\r\n    color: 'orange',\r\n    backgroundColor: 'rgba(255,165,0, 0.1)',\r\n  },\r\n  active: {\r\n    borderBottom: '20px solid turquoise',\r\n    color: '#40E0D0',\r\n    backgroundColor: 'rgb(64,224,208, 0.1)'\r\n  },\r\n  recovered: {\r\n    borderBottom: '20px solid springgreen',\r\n    color: 'green',\r\n    backgroundColor: 'rgb(0,128,0, 0.1)'\r\n  },\r\n  deaths: {\r\n    borderBottom: '20px solid red',\r\n    color: 'red',\r\n    backgroundColor: 'rgb(255, 0, 0, 0.1)'\r\n  },\r\n  tables: {\r\n    maxHeight: '240px',\r\n    width: '100% !important',\r\n  },\r\n  more: {\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst Cards = ({ data, date }) => {\r\n  const totalInfected = parseInt(data.TotalConfirmed);\r\n  const totalRecovered = parseInt(data.TotalRecovered);\r\n  const totalDeaths = parseInt(data.TotalDeaths);\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n\r\n  const styles = useStyles();\r\n\r\n  const [tdyData, setTdyData] = useState([]);\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  const columns = [\r\n    { id: \"country\", label: \"Country\" },\r\n    { id: \"todayCases\", label: \"Newly Confirmed\" },\r\n    { id: \"todayDeaths\", label: \"New Deaths\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { today } = fetchedAPI;\r\n      const { yesterday } = fetchedAPI;\r\n      setTdyData(today);\r\n      setYtdData(yesterday);\r\n    }\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const topDailyBar = (\r\n    tdyData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: tdyData.map(items => items.country),\r\n          datasets: [\r\n            {\r\n              label: 'New Cases',\r\n              backgroundColor: 'rgba(0,255,127, 0.5)',\r\n              data: tdyData.map(items => items.todayCases),\r\n            },\r\n            {\r\n              label: 'Deaths',\r\n              backgroundColor: 'rgba(0, 0, 225, 0.5)',\r\n              data: tdyData.map(items => items.todayDeaths),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: true },\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    ) : <LinearProgress />\r\n  )\r\n\r\n  const topYtdBar = (\r\n    ytdData ? (\r\n      <HorizontalBar\r\n        data={{\r\n          labels: ytdData.map(items => items.country),\r\n          datasets: [\r\n            {\r\n              label: 'New Cases',\r\n              backgroundColor: 'rgb(128,0,128, 0.5)',\r\n              data: ytdData.map(items => items.todayCases),\r\n            },\r\n            {\r\n              label: 'Deaths',\r\n              backgroundColor: 'yellow',\r\n              data: ytdData.map(items => items.todayDeaths),\r\n            }\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: true },\r\n          scales: {\r\n            xAxes: [{\r\n              stacked: true,\r\n            }],\r\n            yAxes: [{\r\n              stacked: true\r\n            }]\r\n          }\r\n        }}\r\n      />\r\n    ) : <LinearProgress />\r\n  )\r\n\r\n  if (!totalInfected) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div >\r\n      <Grid container spacing={3} justify='center' borderRadius={16}>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.infected)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Confirmed</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalInfected} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.recovered)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Recovered</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalRecovered} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.active)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Active</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalActive} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={2} className={cx(styles.card, styles.deaths)}>\r\n          <CardContent>\r\n            <Typography gutterBottom>Deaths</Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp start={0} end={totalDeaths} duration={2.5} separator=\",\" />\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Typography variant='h5' color='textSecondary' gutterBottom style={{ textAlign: 'center' }}>Top 10 Today <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">📈</span></Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n          <Grid item>\r\n            <TableContainer className={styles.tables}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell key={column.id}>{column.label}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {tdyData.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={row.country}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id}>{value.toLocaleString()}</TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <div className={styles.container}>\r\n            <Grid item>\r\n              {topDailyBar}\r\n            </Grid>\r\n          </div>\r\n        </Grid>\r\n      </Paper>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Typography variant='h5' color='textSecondary' gutterBottom style={{ textAlign: 'center' }}>Top 10 Yesterday <span role=\"img\" aria-label=\"grinning face\" id=\"rise trend\">📈</span></Typography>\r\n        <Grid container spacing={3} justify='center'>\r\n          <Grid item>\r\n            <TableContainer className={styles.tables}>\r\n              <Table stickyHeader aria-label=\"sticky table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    {columns.map((column) => (\r\n                      <TableCell key={column.id}>{column.label}</TableCell>\r\n                    ))}\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {ytdData.map((row) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        tabIndex={-1}\r\n                        key={row.country}\r\n                      >\r\n                        {columns.map((column) => {\r\n                          const value = row[column.id];\r\n                          return (\r\n                            <TableCell key={column.id}>{value.toLocaleString()}</TableCell>\r\n                          );\r\n                        })}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <div className={styles.container}>\r\n            <Grid item>\r\n              {topYtdBar}\r\n            </Grid>\r\n          </div>\r\n          <Grid item>\r\n            <Typography variant='button' ><Button color='secondary' className={styles.more} href='#/toptensummary'>Comparison Tables Click Here</Button></Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Cards;","import React, { useState, useEffect } from 'react';\r\nimport { Line, Doughnut } from 'react-chartjs-2';\r\nimport { Typography, Card, Grid, Paper } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { fetchWorldDailyData } from '../../api-handler/index';\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: 'flexbox',\r\n    textAlign: 'center',\r\n    width: '80%',\r\n    justifyItems: 'center',\r\n  },\r\n  card: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '0% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  card1: {\r\n    padding: '2%',\r\n    width: '50%',\r\n    marginTop: '0% !important',\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)',\r\n    borderRadius: '12px',\r\n  },\r\n  root: {\r\n    marginTop: '0.5%',\r\n    marginLeft: '10%',\r\n    width: '80%',\r\n\r\n  },\r\n  more: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.2)'\r\n  }\r\n})\r\n\r\nconst Charts = ({ data }) => {\r\n  const [worldDailyData, setWorldData] = useState([]);\r\n\r\n  const totalInfected = (data.TotalConfirmed);\r\n  const totalRecovered = data.TotalRecovered;\r\n  const totalDeaths = data.TotalDeaths;\r\n  const totalActive = totalInfected - totalDeaths - totalRecovered;\r\n  const total = totalInfected + totalDeaths + totalRecovered;\r\n  console.log(totalInfected)\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setWorldData(await fetchWorldDailyData());\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const worldBreakdown = (\r\n    totalInfected ? (\r\n      <Doughnut\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths', 'Active'],\r\n          datasets: [{\r\n            data: [totalInfected, totalRecovered, totalDeaths, totalActive],\r\n            backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\", \"rgb(0, 225, 0, 0.5)\"]\r\n          }],\r\n\r\n        }}\r\n      />\r\n    ) : null\r\n  )\r\n\r\n  const worldLineGraph = (\r\n    worldDailyData.length\r\n      ? (<Line\r\n        data={{\r\n          labels: worldDailyData.map(items => new Date(items.last_update).toDateString()),\r\n          datasets: [{\r\n            data: worldDailyData.map(items => items.total_cases),\r\n            label: 'Confirmed',\r\n            borderColor: '#FFA500',\r\n            backgroundColor: 'rgba(255,165,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => items.total_deaths),\r\n            label: 'Deaths',\r\n            borderColor: '#FF0000',\r\n            backgroundColor: 'rgba(255,0,0, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_recovered;\r\n            }),\r\n            label: 'Recovered',\r\n            borderColor: '#00FF7F',\r\n            backgroundColor: 'rgba(0,255,127, 0.3)',\r\n            fill: 'origin'\r\n          }, {\r\n            data: worldDailyData.map(items => {\r\n              return items.total_cases - items.total_deaths - items.total_recovered;\r\n            }),\r\n            label: 'Active',\r\n            borderColor: '#FFFF00',\r\n            backgroundColor: 'rgba(255,255,0, 0.3)',\r\n            fill: 'origin'\r\n          }]\r\n        }}\r\n        options={{\r\n          maintainAspectRatio: true,\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n              type: 'time',\r\n              ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 3\r\n              }\r\n            }],\r\n            yAxes: [{\r\n              ticks: {\r\n                maxTicksLimit: 4\r\n              }\r\n            }]\r\n          }\r\n        }} />)\r\n      : null\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={0} className={styles.root}>\r\n        <Grid xs={12} lg={12} container justify='center' direction='row'>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Typography variant='button' align='center'>Trend</Typography>\r\n            {worldLineGraph}\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card1}>\r\n            <Typography variant='button' align='center'>Breakdown</Typography>\r\n            {worldBreakdown}\r\n            <Typography variant='button' align='center'>Death Rate: {(totalDeaths / total * 100).toFixed(2)}%</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Charts;","import React from 'react';\r\nimport Cards from './Components/Cards/Cards';\r\nimport Charts from './Components/Charts/Charts';\r\nimport TopBar from './Components/TopBar/TopBar';\r\n\r\nimport { fetchData } from './api-handler/index';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    data: {},\r\n    dataDynamic: {},\r\n    date: '',\r\n    country: '',\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData.Global });\r\n    this.setState({ date: fetchedData.Date });\r\n  }\r\n\r\n  render() {\r\n\r\n    const { data } = this.state;\r\n    const { date } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='container'>\r\n          <TopBar />\r\n          <Cards data={data} date={date} />\r\n          <Charts data={data} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;\r\n","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport MaterialTable from 'material-table';\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  more: {\r\n    alignItems: 'center'\r\n  }\r\n});\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst TopTenTables = () => {\r\n  const styles = useStyles();\r\n  const [tdyData, setTdyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { today } = fetchedAPI;\r\n      setTdyData(today);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"country\", title: \"Country\" },\r\n    { field: \"cases\", title: \"Total Cases\" },\r\n    { field: \"todayCases\", title: \"New Cases\" },\r\n    { field: \"deaths\", title: \"Total Deaths\" },\r\n    { field: \"recovered\", title: \"Total Recovered\" },\r\n    { field: \"todayRecovered\", title: \"New Recovered\" },\r\n    { field: \"active\", title: \"Active\" },\r\n    { field: \"casesPerOneMillion\", title: \"Cases per million\" },\r\n    { field: \"deathsPerOneMillion\", title: \"Deaths per million\" },\r\n    { field: \"population\", title: \"Total Population\" },\r\n    { field: \"continent\", title: \"Continent\" }\r\n  ];\r\n\r\n  if (!tdyData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  var dataSet = tdyData;\r\n  // const mapData = (dataSet) => {\r\n  //   dataSet.map(item => {\r\n  //     item.country = item.country.toLocaleString()\r\n  //     item.cases = item.cases.toLocaleString()\r\n  //     item.todayCases = item.todayCases.toLocaleString()\r\n  //     item.deaths = item.deaths.toLocaleString()\r\n  //     item.recovered = item.recovered.toLocaleString()\r\n  //     item.todayRecovered = item.todayRecovered.toLocaleString()\r\n  //     item.active = item.active.toLocaleString()\r\n  //     item.casesPerOneMillion = item.casesPerOneMillion.toLocaleString()\r\n  //     item.deathsPerOneMillion = item.deathsPerOneMillion.toLocaleString()\r\n  //     item.population = item.population.toLocaleString()\r\n  //     item.continent = item.continent.toLocaleString()\r\n  //     return item;\r\n  //   })\r\n  // }\r\n  // mapData(dataSet);\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummaryytd'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <MaterialTable\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                title={window.location.hash === \"#/toptensummary\" ? \"Today's Summary\" : \"Yesterday's Summary\"}\r\n                data={dataSet}\r\n                options={{\r\n                  sorting: true,\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopTenTables;","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport MaterialTable from 'material-table';\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst TablesYtd = () => {\r\n  const styles = useStyles();\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { yesterdayAll } = fetchedAPI;\r\n      setYtdData(yesterdayAll);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"country\", title: \"Country\" },\r\n    { field: \"cases\", title: \"Total Cases\" },\r\n    { field: \"todayCases\", title: \"New Cases\" },\r\n    { field: \"deaths\", title: \"Total Deaths\" },\r\n    { field: \"recovered\", title: \"Total Recovered\" },\r\n    { field: \"todayRecovered\", title: \"New Recovered\" },\r\n    { field: \"active\", title: \"Active\" },\r\n    { field: \"casesPerOneMillion\", title: \"Cases per million\" },\r\n    { field: \"deathsPerOneMillion\", title: \"Deaths per million\" },\r\n    { field: \"population\", title: \"Total Population\" },\r\n    { field: \"continent\", title: \"Continent\" }\r\n  ];\r\n\r\n  if (!ytdData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  var dataSet = ytdData;\r\n  // const mapData = (dataSet) => {\r\n  //   dataSet.map(item => {\r\n  //     item.country\r\n  //     item.case\r\n  //     item.todayCases = i\r\n  //     item.deaths\r\n  //     item.recovered =\r\n  //       item.todayRecovered = item.\r\n  //         item.active\r\n  //     item.casesPerOneMillion = item.case\r\n  //     item.deathsPerOneMillion = item.death\r\n  //     item.population = i\r\n  //     item.continent = \r\n  //     return item;\r\n  //   })\r\n  // }\r\n  // mapData(dataSet);\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item component={Card} className={styles.card}>\r\n            <Grid item>\r\n              <Button color='secondary' className={styles.more} href='#/summary'>Today</Button>\r\n              <Button color='secondary' className={styles.more} href='#/ytdsummary'>Yesterday</Button>\r\n              <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n            </Grid>\r\n            <CardContent>\r\n              <MaterialTable\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                title={window.location.hash === \"#/summary\" ? \"Today's Summary\" : \"Yesterday's Summary\"}\r\n                data={dataSet}\r\n                options={{\r\n                  sorting: true,\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TablesYtd;","import React, { useState, useEffect, forwardRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Paper,\r\n  LinearProgress,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport MaterialTable from 'material-table';\r\n\r\nimport TopBar from \"../TopBar/TopBar\";\r\nimport { fetchWorldTdyYtd } from \"../../api-handler/index\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: 530,\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n  card: {\r\n    backgroundColor: 'rgb(92, 219, 149, 0.1)'\r\n  },\r\n});\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst TopTenYtd = () => {\r\n  const styles = useStyles();\r\n  const [ytdData, setYtdData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      const fetchedAPI = await fetchWorldTdyYtd();\r\n      const { yesterday } = fetchedAPI;\r\n      setYtdData(yesterday);\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: \"country\", title: \"Country\" },\r\n    { field: \"cases\", title: \"Total Cases\" },\r\n    { field: \"todayCases\", title: \"New Cases\" },\r\n    { field: \"deaths\", title: \"Total Deaths\" },\r\n    { field: \"recovered\", title: \"Total Recovered\" },\r\n    { field: \"todayRecovered\", title: \"New Recovered\" },\r\n    { field: \"active\", title: \"Active\" },\r\n    { field: \"casesPerOneMillion\", title: \"Cases per million\" },\r\n    { field: \"deathsPerOneMillion\", title: \"Deaths per million\" },\r\n    { field: \"population\", title: \"Total Population\" },\r\n    { field: \"continent\", title: \"Continent\" }\r\n  ];\r\n\r\n  if (!ytdData.map(item => item.country)) {\r\n    return (\r\n      <LinearProgress />\r\n    )\r\n  }\r\n\r\n  var dataSet = ytdData;\r\n  // const mapData = (dataSet) => {\r\n  //   dataSet.map(item => {\r\n  //     item.country = item.country.toLocaleString()\r\n  //     item.cases = item.cases.toLocaleString()\r\n  //     item.todayCases = item.todayCases.toLocaleString()\r\n  //     item.deaths = item.deaths.toLocaleString()\r\n  //     item.recovered = item.recovered.toLocaleString()\r\n  //     item.todayRecovered = item.todayRecovered.toLocaleString()\r\n  //     item.active = item.active.toLocaleString()\r\n  //     item.casesPerOneMillion = item.casesPerOneMillion.toLocaleString()\r\n  //     item.deathsPerOneMillion = item.deathsPerOneMillion.toLocaleString()\r\n  //     item.population = item.population.toLocaleString()\r\n  //     item.continent = item.continent.toLocaleString()\r\n  //     return item;\r\n  //   })\r\n  // }\r\n  // mapData(dataSet);\r\n\r\n  return (\r\n    <>\r\n      <TopBar />\r\n      <Paper className={styles.root}>\r\n        <Grid spacing={3} align=\"center\">\r\n          <Grid item>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummary'>Today</Button>\r\n            <Button color='secondary' className={styles.more} href='#/toptensummaryytd'>Yesterday</Button>\r\n            <Button color='secondary' className={styles.more} href='#/'>Home</Button>\r\n          </Grid>\r\n          <Grid item component={Card} className={styles.card}>\r\n            <CardContent>\r\n              <MaterialTable\r\n                icons={tableIcons}\r\n                columns={columns}\r\n                title={window.location.hash === \"#/toptensummary\" ? \"Today's Summary\" : \"Yesterday's Summary\"}\r\n                data={dataSet}\r\n                options={{\r\n                  sorting: true,\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TopTenYtd;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Tables from './Components/Tables/Tables';\r\nimport Singapore from './Components/sgData/Singapore';\r\nimport News from './Components/News/News';\r\nimport About from './Components/About/About';\r\nimport App from './App';\r\nimport TopTenTables from './Components/Tables/TopTenTables';\r\nimport TablesYtd from './Components/Tables/TablesYtd';\r\nimport TopTenYtd from './Components/Tables/TopTenYtd';\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/' component={App} />\r\n      <Route path='/summary' component={Tables} />\r\n      <Route path='/ytdsummary' component={TablesYtd} />\r\n      <Route path='/toptensummary' component={TopTenTables} />\r\n      <Route path='/toptensummaryytd' component={TopTenYtd} />\r\n      <Route path='/singapore' component={Singapore} />\r\n      <Route path='/news' component={News} />\r\n      <Route path='/about' component={About} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nimport Routes from './Route';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename='/covid-dash/'>\r\n    <Routes />\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}